var hash = require('hash-sum')
var ref = require('./util');
var isJS = ref.isJS;

module.exports = (function () {
  function VueSSRClientPlugin (options) {
  if ( options === void 0 ) options = {};

    this.options = Object.assign({
      filename: 'vue-ssr-client-manifest.json',
    }, options)
  }

  VueSSRClientPlugin.prototype.apply = function apply (compiler) {
    var this$1 = this;

    compiler.plugin('emit', function (compilation, cb) {
      var stats = compilation.getStats().toJson()

      var allFiles = stats.assets
        .map(function (a) { return a.name; })

      var initialScripts = Object.keys(stats.entrypoints)
        .map(function (name) { return stats.entrypoints[name].assets; })
        .reduce(function (assets, all) { return all.concat(assets); }, [])
        .filter(isJS)

      var asyncScripts = allFiles
        .filter(isJS)
        .filter(function (file) { return initialScripts.indexOf(file) < 0; })

      var manifest = {
        publicPath: stats.publicPath,
        all: allFiles,
        initial: initialScripts,
        async: asyncScripts,
        modules: { /* [identifier: string]: Array<index: number> */ }
      }

      stats.modules.forEach(function (m) {
        // ignore modules duplicated in multiple chunks
        if (m.chunks.length === 1) {
          var cid = m.chunks[0]
          var chunk = stats.chunks.find(function (c) { return c.id === cid; })
          manifest.modules[hash(m.identifier)] = chunk.files.map(function (file) {
            return manifest.all.indexOf(file)
          })
        }
        // asset modules, e.g. images, fonts
        if (m.assets.length) {
          manifest.modules[hash(m.identifier)] = m.assets.map(function (file) {
            return manifest.all.indexOf(file)
          })
        }
      })

      // produce no-css version of async chunks
      stats.chunks.forEach(function (chunk) {
        if (!chunk.initial) {
          chunk.files.forEach(function (file) {
            var source = compilation.assets[file].source()
            var stripped = stripCss(source)
            if (source !== stripped) {
              // record in manifest that
              ;(manifest.hasNoCssVersion || (manifest.hasNoCssVersion = {}))[file] = true
              compilation.assets[file.replace(/\.js$/, '.no-css.js')] = {
                source: function () { return stripped; },
                size: function () { return stripped.length; }
              }
            }
          })
        }
      })

      var json = JSON.stringify(manifest, null, 2)
      compilation.assets[this$1.options.filename] = {
        source: function () { return json; },
        size: function () { return json.length; }
      }
      cb()
    })
  };

  return VueSSRClientPlugin;
}())

// super hacky way of stripping CSS from minified output
// (this is how css-loader embeds CSS)
var CSS_RE = /(\d+:function\(\w,\w,\w\)\{\w=\w\.exports=\w\(\d+\)\(void 0\),\w\.push\(\[\w\.i,")[^"]*?(",")[^"]*?("\]\)\})/g

function stripCss (source) {
  return source.replace(CSS_RE, '$1$2$3')
}
